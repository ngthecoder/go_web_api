services:
  postgres:
    image: postgres:15-alpine
    container_name: recipe-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: recipeuser
      POSTGRES_PASSWORD: recipepassword
      POSTGRES_DB: recipes
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - recipe-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U recipeuser -d recipes"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: recipe-backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_PATH: postgres://recipeuser:recipepassword@postgres:5432/recipes?sslmode=disable
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production
      PORT: 8000
      ALLOWED_ORIGINS: http://localhost:3000
    ports:
      - "8000:8000"
    networks:
      - recipe-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/stats"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s
  
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: recipe-frontend
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
    ports:
      - "3000:3000"
    networks:
      - recipe-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

volumes:
  postgres_data:
    driver: local

networks:
  recipe-network:
    driver: bridge
